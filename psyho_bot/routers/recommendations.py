import g4f
from fastapi import APIRouter, Form, HTTPException
from datetime import datetime
from typing import Dict, List

router = APIRouter()

# Dictionaries to store conversation history
conversation_history: Dict[str, List[Dict]] = {}

@router.post("/get_recommendations")
async def get_recommendations(
        name: str = Form(...),
        age: int = Form(...),
        condition: str = Form(...),
        description: str = Form(...),
        question: str = Form(None),
        session_id: str = Form(...)
):
    try:
        # Initialize conversation history for a new session
        if session_id not in conversation_history:
            conversation_history[session_id] = []

            # Initial prompt to the assistant
            initial_prompt = (
                f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ü—Ä–æ—à—É —Ç–µ–±—è –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –≤–≤–æ–¥–∞. "
                f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò, –∏ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. "
                f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑.\n\n"
                f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name} üåü\n"
                f"–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞: {age} –ª–µ—Ç üéÇ\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {condition} üòå\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {description} ‚úçÔ∏è\n"
                f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."
            )
            conversation_history[session_id].append({"role": "user", "content": initial_prompt})

        # Add the user's question if provided
        if question:
            conversation_history[session_id].append({
                "role": "user",
                "content": question,
                "timestamp": datetime.now().strftime("%H:%M")
            })

        # Prepare the messages for the assistant
        messages = conversation_history[session_id]

        # Get the assistant's response
        response = g4f.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=messages,
            stream=False,  # Changed to False for simplicity
        )

        # Collect the assistant's response
        if isinstance(response, list):
            result = "".join(response)
        else:
            result = response

        # Add the assistant's response to the conversation history
        conversation_history[session_id].append({
            "role": "assistant",
            "content": result,
            "timestamp": datetime.now().strftime("%H:%M")
        })

        return {"recommendations": result}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
