import g4f
from fastapi import FastAPI, Form, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware

from datetime import datetime
from pydantic import BaseModel
from typing import List, Dict

# Initialize FastAPI app
app = FastAPI()

# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Dictionaries to store conversation history and saved sessions
conversation_history = {}
saved_sessions = []


@app.post("/get_recommendations")
async def get_recommendations(
        name: str = Form(...),
        age: int = Form(...),
        condition: str = Form(...),
        description: str = Form(...),
        question: str = Form(None),
        session_id: str = Form(...)
):
    try:
        # Initialize conversation history for a new session
        if session_id not in conversation_history:
            conversation_history[session_id] = []

            # Initial prompt to the assistant
            initial_prompt = (
                f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ü—Ä–æ—à—É —Ç–µ–±—è –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –≤–≤–æ–¥–∞. "
                f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò, –∏ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. "
                f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑.\n\n"
                f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name} üåü\n"
                f"–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞: {age} –ª–µ—Ç üéÇ\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {condition} üòå\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {description} ‚úçÔ∏è\n"
                f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."
            )
            conversation_history[session_id].append({"role": "user", "content": initial_prompt})

        # Add the user's question if provided
        if question:
            conversation_history[session_id].append({
                "role": "user",
                "content": question,
                "timestamp": datetime.now().strftime("%H:%M")
            })

        # Prepare the messages for the assistant
        messages = conversation_history[session_id]

        # Get the assistant's response
        response = g4f.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=messages,
            stream=False,  # Changed to False for simplicity
        )

        # Collect the assistant's response
        if isinstance(response, list):
            result = "".join(response)
        else:
            result = response

        # Add the assistant's response to the conversation history
        conversation_history[session_id].append({
            "role": "assistant",
            "content": result,
            "timestamp": datetime.now().strftime("%H:%M")
        })

        return {"recommendations": result}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")


class SessionData(BaseModel):
    session_id: str
    name: str
    age: int
    date: str


mood_entries_db: Dict[str, List[Dict]] = {}


# –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
class MoodEntry(BaseModel):
    user_id: str
    date: str
    rating: int
    comment: str


@app.post("/save_session")
async def save_session(data: SessionData):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è –∏–∑ conversation_history
        history = conversation_history.get(data.session_id, [])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        saved_sessions.append({
            "session_id": data.session_id,
            "name": data.name,
            "age": data.age,
            "date": data.date,
            "history": history
        })
        return {"message": "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")


@app.post("/save_mood_entry")
async def save_mood_entry(entry: MoodEntry):
    try:
        user_id = entry.user_id
        if user_id not in mood_entries_db:
            mood_entries_db[user_id] = []
        mood_entries_db[user_id].append({
            "date": entry.date,
            "rating": entry.rating,
            "comment": entry.comment
        })
        return {"message": "–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {str(e)}")


@app.get("/get_mood_entries")
async def get_mood_entries(user_id: str = Query(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")):
    try:
        entries = mood_entries_db.get(user_id, [])
        return {"entries": entries}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {str(e)}")


@app.get("/get_mood_analysis")
async def get_mood_analysis(user_id: str = Query(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")):
    try:
        entries = mood_entries_db.get(user_id, [])
        if not entries:
            return {"analysis": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."}

        average_rating = sum(entry['rating'] for entry in entries) / len(entries)
        if average_rating < 5:
            analysis = "–í–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∏–∑–∫–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
        else:
            analysis = "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"

        return {"analysis": analysis}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {str(e)}")



@app.get("/get_sessions")
async def get_sessions():
    return {"sessions": saved_sessions}


@app.get("/get_session_details")
async def get_session_details(session_id: str = Query(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏")):
    try:
        # Find the session by session_id
        session = next((s for s in saved_sessions if s['session_id'] == session_id), None)
        if not session:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return {"session": session}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–µ—Å—Å–∏–∏: {str(e)}")